{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nexport { default as useColorScheme } from \"react-native-web/dist/exports/useColorScheme\";\nexport function usePublicKey() {\n  var didLaunch = useDidLaunch();\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    publicKey = _useState2[0],\n    setPublicKey = _useState2[1];\n  useEffect(function () {\n    if (didLaunch) {\n      window.xnft.solana.on('publicKeyUpdate', function () {\n        setPublicKey(window.xnft.solana.publicKey);\n      });\n      setPublicKey(window.xnft.solana.publicKey);\n    }\n  }, [didLaunch, setPublicKey]);\n  return publicKey;\n}\nexport function usePublicKeys() {\n  var didLaunch = useDidLaunch();\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    publicKeys = _useState4[0],\n    setPublicKeys = _useState4[1];\n  useEffect(function () {\n    if (didLaunch) {\n      window.xnft.on('publicKeysUpdate', function () {\n        setPublicKeys(window.xnft.publicKeys);\n      });\n      setPublicKeys(window.xnft.publicKeys);\n    }\n  }, [didLaunch, setPublicKeys]);\n  return publicKeys;\n}\nexport function useConnection() {\n  var didLaunch = useDidLaunch();\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    connection = _useState6[0],\n    setConnection = _useState6[1];\n  useEffect(function () {\n    if (didLaunch) {\n      window.xnft.solana.on('connectionUpdate', function () {\n        setConnection(window.xnft.solana.connection);\n      });\n      setConnection(window.xnft.solana.connection);\n    }\n  }, [didLaunch, setConnection]);\n  return connection;\n}\nexport function useSolanaConnection() {\n  var didLaunch = useDidLaunch();\n  var _useState7 = useState(),\n    _useState8 = _slicedToArray(_useState7, 2),\n    connection = _useState8[0],\n    setConnection = _useState8[1];\n  useEffect(function () {\n    if (didLaunch) {\n      window.xnft.solana.on('connectionUpdate', function () {\n        setConnection(window.xnft.solana.connection);\n      });\n      setConnection(window.xnft.solana.connection);\n    }\n  }, [didLaunch, setConnection]);\n  return connection;\n}\nexport function useEthereumConnection() {\n  var didLaunch = useDidLaunch();\n  var _useState9 = useState(),\n    _useState10 = _slicedToArray(_useState9, 2),\n    connection = _useState10[0],\n    setConnection = _useState10[1];\n  useEffect(function () {\n    if (didLaunch) {\n      var _window$xnft$ethereum;\n      (_window$xnft$ethereum = window.xnft.ethereum) == null ? void 0 : _window$xnft$ethereum.on('connectionUpdate', function () {\n        setConnection(window.xnft.ethereum.connection);\n      });\n      setConnection(window.xnft.ethereum.connection);\n    }\n  }, [didLaunch, setConnection]);\n  return connection;\n}\nexport function useDidLaunch() {\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    didConnect = _useState12[0],\n    setDidConnect = _useState12[1];\n  useEffect(function () {\n    window.addEventListener('load', function () {\n      window.xnft.on('connect', function () {\n        setDidConnect(true);\n      });\n      window.xnft.on('disconnect', function () {\n        setDidConnect(false);\n      });\n    });\n  }, []);\n  return didConnect;\n}\nexport var useReady = useDidLaunch;\nexport function useMetadata() {\n  var didLaunch = useDidLaunch();\n  var _useState13 = useState(),\n    _useState14 = _slicedToArray(_useState13, 2),\n    metadata = _useState14[0],\n    setMetadata = _useState14[1];\n  useEffect(function () {\n    if (didLaunch) {\n      setMetadata(window.xnft.metadata);\n      window.xnft.addListener('metadata', function (event) {\n        setMetadata(event.data.metadata);\n      });\n    }\n  }, [didLaunch, setMetadata]);\n  return metadata;\n}\nexport function useDimensions() {\n  var debounceMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var _useState15 = useState({\n      height: window.innerHeight,\n      width: window.innerWidth\n    }),\n    _useState16 = _slicedToArray(_useState15, 2),\n    dimensions = _useState16[0],\n    setDimensions = _useState16[1];\n  var debounce = function debounce(fn) {\n    var timer;\n    return function () {\n      var _arguments = arguments,\n        _this = this;\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        clearTimeout(timer);\n        fn.apply(_this, _arguments);\n      }, debounceMs);\n    };\n  };\n  useEffect(function () {\n    setDimensions({\n      height: window.innerHeight,\n      width: window.innerWidth\n    });\n    var debouncedHandleResize = debounce(function handleResize() {\n      setDimensions({\n        height: window.innerHeight,\n        width: window.innerWidth\n      });\n    });\n    window.addEventListener('resize', debouncedHandleResize);\n    return function () {\n      window.removeEventListener('resize', debouncedHandleResize);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"names":["useEffect","useState","default","useColorScheme","usePublicKey","didLaunch","useDidLaunch","_useState","_useState2","_slicedToArray","publicKey","setPublicKey","window","xnft","solana","on","usePublicKeys","_useState3","_useState4","publicKeys","setPublicKeys","useConnection","_useState5","_useState6","connection","setConnection","useSolanaConnection","_useState7","_useState8","useEthereumConnection","_useState9","_useState10","_window$xnft$ethereum","ethereum","_useState11","_useState12","didConnect","setDidConnect","addEventListener","useReady","useMetadata","_useState13","_useState14","metadata","setMetadata","addListener","event","data","useDimensions","debounceMs","arguments","length","undefined","_useState15","height","innerHeight","width","innerWidth","_useState16","dimensions","setDimensions","debounce","fn","timer","_arguments","_this","clearTimeout","setTimeout","apply","debouncedHandleResize","handleResize","removeEventListener"],"sources":["/Users/ezekiel/Desktop/frakt/loans-xnft/src/hooks/xnft-hooks.tsx"],"sourcesContent":["import { Event, XnftMetadata } from '@coral-xyz/common-public'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { useEffect, useState } from 'react'\n\ndeclare global {\n  interface Window {\n    xnft: any\n  }\n}\n\nexport { useColorScheme } from 'react-native'\n\n/** @deprecated use `usePublicKeys()` instead */\nexport function usePublicKey(): PublicKey | undefined {\n  const didLaunch = useDidLaunch()\n  const [publicKey, setPublicKey] = useState()\n  useEffect(() => {\n    if (didLaunch) {\n      window.xnft.solana.on('publicKeyUpdate', () => {\n        setPublicKey(window.xnft.solana.publicKey)\n      })\n      setPublicKey(window.xnft.solana.publicKey)\n    }\n  }, [didLaunch, setPublicKey])\n  return publicKey\n}\n\nexport function usePublicKeys(): { [key: string]: PublicKey } | undefined {\n  const didLaunch = useDidLaunch()\n  const [publicKeys, setPublicKeys] = useState()\n  useEffect(() => {\n    if (didLaunch) {\n      window.xnft.on('publicKeysUpdate', () => {\n        setPublicKeys(window.xnft.publicKeys)\n      })\n      setPublicKeys(window.xnft.publicKeys)\n    }\n  }, [didLaunch, setPublicKeys])\n  return publicKeys\n}\n\n/** @deprecated use blockchain-specific connections instead */\nexport function useConnection(): Connection | undefined {\n  const didLaunch = useDidLaunch()\n  const [connection, setConnection] = useState()\n  useEffect(() => {\n    if (didLaunch) {\n      window.xnft.solana.on('connectionUpdate', () => {\n        setConnection(window.xnft.solana.connection)\n      })\n      setConnection(window.xnft.solana.connection)\n    }\n  }, [didLaunch, setConnection])\n  return connection\n}\n\nexport function useSolanaConnection(): Connection | undefined {\n  const didLaunch = useDidLaunch()\n  const [connection, setConnection] = useState()\n  useEffect(() => {\n    if (didLaunch) {\n      window.xnft.solana.on('connectionUpdate', () => {\n        setConnection(window.xnft.solana.connection)\n      })\n      setConnection(window.xnft.solana.connection)\n    }\n  }, [didLaunch, setConnection])\n  return connection\n}\n\nexport function useEthereumConnection(): Connection | undefined {\n  const didLaunch = useDidLaunch()\n  const [connection, setConnection] = useState()\n  useEffect(() => {\n    if (didLaunch) {\n      window.xnft.ethereum?.on('connectionUpdate', () => {\n        setConnection(window.xnft.ethereum.connection)\n      })\n      setConnection(window.xnft.ethereum.connection)\n    }\n  }, [didLaunch, setConnection])\n  return connection\n}\n\n// Returns true if the `window.xnft` object is ready to be used.\nexport function useDidLaunch() {\n  const [didConnect, setDidConnect] = useState(false)\n  useEffect(() => {\n    window.addEventListener('load', () => {\n      window.xnft.on('connect', () => {\n        setDidConnect(true)\n      })\n      window.xnft.on('disconnect', () => {\n        setDidConnect(false)\n      })\n    })\n  }, [])\n  return didConnect\n}\n\nexport const useReady = useDidLaunch\n\nexport function useMetadata(): XnftMetadata | undefined {\n  const didLaunch = useDidLaunch()\n  const [metadata, setMetadata] = useState()\n\n  useEffect(() => {\n    if (didLaunch) {\n      setMetadata(window.xnft.metadata)\n      window.xnft.addListener('metadata', (event: Event) => {\n        setMetadata(event.data.metadata)\n      })\n    }\n  }, [didLaunch, setMetadata])\n  return metadata\n}\n\nexport function useDimensions(debounceMs = 0) {\n  const [dimensions, setDimensions] = useState({\n    height: window.innerHeight,\n    width: window.innerWidth,\n  })\n\n  const debounce = (fn: Function) => {\n    let timer: ReturnType<typeof setTimeout>\n    return function () {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        clearTimeout(timer)\n        // @ts-ignore\n        fn.apply(this, arguments)\n      }, debounceMs)\n    }\n  }\n\n  useEffect(() => {\n    setDimensions({\n      height: window.innerHeight,\n      width: window.innerWidth,\n    })\n\n    const debouncedHandleResize = debounce(function handleResize() {\n      setDimensions({\n        height: window.innerHeight,\n        width: window.innerWidth,\n      })\n    })\n\n    window.addEventListener('resize', debouncedHandleResize)\n\n    return () => {\n      window.removeEventListener('resize', debouncedHandleResize)\n    }\n  }, [])\n\n  return dimensions\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}