{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { proposeLoanIx } from '@frakt-protocol/frakt-sdk/lib/loans';\nimport { BN, web3 } from '@project-serum/anchor';\nimport { chunk } from 'lodash';\nimport { signAndSendAllTransactions } from \"./signAndSendAllTransactions\";\nvar PROPOSE_LOAN_IXS_PER_TXN = 3;\nvar createProposeLoansTxns = function () {\n  var _ref2 = _asyncToGenerator(function* (_ref) {\n    var programPublicKey = _ref.programPublicKey,\n      adminPublicKey = _ref.adminPublicKey,\n      connection = _ref.connection,\n      walletPublicKey = _ref.walletPublicKey,\n      bulkNfts = _ref.bulkNfts;\n    var ixnsAndSigners = yield Promise.all(bulkNfts.map(function () {\n      var _ref3 = _asyncToGenerator(function* (bulkNft) {\n        var mint = bulkNft.mint,\n          valuation = bulkNft.valuation,\n          isPriceBased = bulkNft.isPriceBased,\n          priceBased = bulkNft.priceBased,\n          solLoanValue = bulkNft.solLoanValue;\n        var valuationNumber = parseFloat(valuation);\n        var suggestedLoanValue = (priceBased == null ? void 0 : priceBased.suggestedLoanValue) || 0;\n        var suggestedLtvPersent = suggestedLoanValue / valuationNumber * 100;\n        var rawLoanToValue = solLoanValue / valuationNumber * 100;\n        var proposedNftPrice = valuationNumber * 10 ** 9;\n        var loanToValue = rawLoanToValue || suggestedLtvPersent;\n        var _yield$proposeLoanIx = yield proposeLoanIx({\n            programId: programPublicKey,\n            connection: connection,\n            user: walletPublicKey,\n            nftMint: new web3.PublicKey(mint),\n            proposedNftPrice: new BN(proposedNftPrice),\n            isPriceBased: !!isPriceBased,\n            loanToValue: new BN(loanToValue * 100),\n            admin: adminPublicKey\n          }),\n          ixs = _yield$proposeLoanIx.ixs,\n          loan = _yield$proposeLoanIx.loan;\n        return {\n          instructions: ixs,\n          signer: loan\n        };\n      });\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n    var txnsAndSigners = chunk(ixnsAndSigners, PROPOSE_LOAN_IXS_PER_TXN).map(function (ixnsAndSigners) {\n      var _web3$Transaction;\n      return {\n        transaction: (_web3$Transaction = new web3.Transaction()).add.apply(_web3$Transaction, _toConsumableArray(ixnsAndSigners.map(function (_ref4) {\n          var instructions = _ref4.instructions;\n          return instructions;\n        }))),\n        signers: ixnsAndSigners.map(function (_ref5) {\n          var signer = _ref5.signer;\n          return signer;\n        })\n      };\n    });\n    return txnsAndSigners;\n  });\n  return function createProposeLoansTxns(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var createProposeLoans = function () {\n  var _ref7 = _asyncToGenerator(function* (_ref6) {\n    var programPublicKey = _ref6.programPublicKey,\n      adminPublicKey = _ref6.adminPublicKey,\n      bulkNfts = _ref6.bulkNfts,\n      connection = _ref6.connection,\n      wallet = _ref6.wallet,\n      onAfterSend = _ref6.onAfterSend;\n    var txnAndSignersArray = yield createProposeLoansTxns({\n      programPublicKey: new web3.PublicKey(programPublicKey),\n      adminPublicKey: new web3.PublicKey(adminPublicKey),\n      connection: connection,\n      walletPublicKey: wallet.publicKey,\n      bulkNfts: bulkNfts\n    });\n    return yield signAndSendAllTransactions({\n      txnAndSignersArray: txnAndSignersArray,\n      connection: connection,\n      wallet: wallet,\n      onAfterSend: onAfterSend\n    });\n  });\n  return function createProposeLoans(_x3) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["proposeLoanIx","BN","web3","chunk","signAndSendAllTransactions","PROPOSE_LOAN_IXS_PER_TXN","createProposeLoansTxns","_ref2","_asyncToGenerator","_ref","programPublicKey","adminPublicKey","connection","walletPublicKey","bulkNfts","ixnsAndSigners","Promise","all","map","_ref3","bulkNft","mint","valuation","isPriceBased","priceBased","solLoanValue","valuationNumber","parseFloat","suggestedLoanValue","suggestedLtvPersent","rawLoanToValue","proposedNftPrice","loanToValue","_yield$proposeLoanIx","programId","user","nftMint","PublicKey","admin","ixs","loan","instructions","signer","_x2","apply","arguments","txnsAndSigners","_web3$Transaction","transaction","Transaction","add","_toConsumableArray","_ref4","signers","_ref5","_x","createProposeLoans","_ref7","_ref6","wallet","onAfterSend","txnAndSignersArray","publicKey","_x3"],"sources":["/Users/ezekiel/Desktop/frakt/loans-xnft/src/utils/index.ts"],"sourcesContent":["import { Wallet } from '@frakt-protocol/frakt-sdk/lib/common/classes/nodewallet'\nimport { proposeLoanIx } from '@frakt-protocol/frakt-sdk/lib/loans'\nimport { BorrowNftBulk } from '@frakt-protocol/frakt-sdk/lib/loans/loansService'\nimport { BN, web3 } from '@project-serum/anchor'\nimport { chunk } from 'lodash'\n\nimport { signAndSendAllTransactions } from './signAndSendAllTransactions'\n\ninterface TxnAndSigners {\n  transaction: web3.Transaction\n  signers?: web3.Signer[]\n}\n\nconst PROPOSE_LOAN_IXS_PER_TXN = 3\n\ntype CreateProposeLoansTxns = (props: {\n  programPublicKey: web3.PublicKey\n  adminPublicKey: web3.PublicKey\n  connection: web3.Connection\n  walletPublicKey: web3.PublicKey\n  bulkNfts: BorrowNftBulk[]\n}) => Promise<TxnAndSigners[]>\nconst createProposeLoansTxns: CreateProposeLoansTxns = async ({\n  programPublicKey,\n  adminPublicKey,\n  connection,\n  walletPublicKey,\n  bulkNfts,\n}) => {\n  const ixnsAndSigners = await Promise.all(\n    bulkNfts.map(async (bulkNft) => {\n      const { mint, valuation, isPriceBased, priceBased, solLoanValue } =\n        bulkNft\n\n      const valuationNumber = parseFloat(valuation)\n\n      const suggestedLoanValue = priceBased?.suggestedLoanValue || 0\n      const suggestedLtvPersent = (suggestedLoanValue / valuationNumber) * 100\n\n      const rawLoanToValue = (solLoanValue / valuationNumber) * 100\n\n      const proposedNftPrice = valuationNumber * 10 ** 9\n\n      const loanToValue = rawLoanToValue || suggestedLtvPersent\n\n      const { ixs, loan } = await proposeLoanIx({\n        programId: programPublicKey,\n        connection,\n        user: walletPublicKey,\n        nftMint: new web3.PublicKey(mint),\n        proposedNftPrice: new BN(proposedNftPrice),\n        isPriceBased: !!isPriceBased,\n        loanToValue: new BN(loanToValue * 100),\n        admin: adminPublicKey,\n      })\n\n      return {\n        instructions: ixs,\n        signer: loan,\n      }\n    })\n  )\n\n  const txnsAndSigners = chunk(ixnsAndSigners, PROPOSE_LOAN_IXS_PER_TXN).map(\n    (ixnsAndSigners) => ({\n      transaction: new web3.Transaction().add(\n        ...ixnsAndSigners.map(({ instructions }) => instructions)\n      ),\n      signers: ixnsAndSigners.map(({ signer }) => signer),\n    })\n  )\n\n  return txnsAndSigners\n}\n\ntype CreateProposeLoans = (props: {\n  programPublicKey: string\n  adminPublicKey: string\n  bulkNfts: BorrowNftBulk[]\n  connection: web3.Connection\n  wallet: Wallet\n  onAfterSend?: () => void\n}) => Promise<any>\nexport const createProposeLoans: CreateProposeLoans = async ({\n  programPublicKey,\n  adminPublicKey,\n  bulkNfts,\n  connection,\n  wallet,\n  onAfterSend,\n}) => {\n  const txnAndSignersArray = await createProposeLoansTxns({\n    programPublicKey: new web3.PublicKey(programPublicKey),\n    adminPublicKey: new web3.PublicKey(adminPublicKey),\n    connection,\n    walletPublicKey: wallet.publicKey,\n    bulkNfts,\n  })\n\n  return await signAndSendAllTransactions({\n    txnAndSignersArray,\n    connection,\n    wallet,\n    onAfterSend,\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}