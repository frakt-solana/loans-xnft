{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { useSolanaWallet } from \"./useWallet\";\nexport var useBulkSuggestion = function useBulkSuggestion() {\n  var solAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var _useSolanaWallet = useSolanaWallet(),\n    publicKey = _useSolanaWallet.publicKey;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    suggestion = _useState4[0],\n    setSuggestion = _useState4[1];\n  useEffect(function () {\n    if (solAmount) {\n      ;\n      _asyncToGenerator(function* () {\n        try {\n          setIsLoading(true);\n          var _suggestion = yield fetchSuggestNfts({\n            walletPublicKey: publicKey,\n            totalValue: solAmount\n          });\n          setSuggestion(_suggestion);\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setIsLoading(false);\n        }\n      })();\n    }\n  }, [solAmount]);\n  return {\n    suggestion: suggestion || null,\n    isLoading: isLoading\n  };\n};\nvar fetchSuggestNfts = function () {\n  var _ref3 = _asyncToGenerator(function* (_ref2) {\n    var walletPublicKey = _ref2.walletPublicKey,\n      totalValue = _ref2.totalValue;\n    try {\n      var result = yield (yield fetch(\"https://api.frakt.xyz/nft/suggest2/\" + (walletPublicKey == null ? void 0 : walletPublicKey.toBase58()) + \"?solAmount=\" + totalValue)).json();\n      return result;\n    } catch (error) {\n      console.error(error);\n      return null;\n    }\n  });\n  return function fetchSuggestNfts(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["useEffect","useState","useSolanaWallet","useBulkSuggestion","solAmount","arguments","length","undefined","_useSolanaWallet","publicKey","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","suggestion","setSuggestion","_asyncToGenerator","fetchSuggestNfts","walletPublicKey","totalValue","error","console","_ref3","_ref2","result","fetch","toBase58","json","_x","apply"],"sources":["/Users/ezekiel/Desktop/frakt/loans-xnft/src/hooks/useBulkSuggestion.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport {\n  BorrowNftBulk,\n  BulkTypes,\n} from '@frakt-protocol/frakt-sdk/lib/loans/loansService'\nimport { web3 } from '@frakt-protocol/frakt-sdk'\n\nimport { useSolanaWallet } from './useWallet'\n\nexport declare type BulkSuggestion = {\n  [key in BulkTypes]?: BorrowNftBulk[]\n}\n\nexport const useBulkSuggestion = (solAmount = 0) => {\n  const { publicKey } = useSolanaWallet()\n\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [suggestion, setSuggestion] = useState<BulkSuggestion | any>(null)\n\n  useEffect(() => {\n    if (solAmount) {\n      ;(async () => {\n        try {\n          setIsLoading(true)\n          const suggestion = await fetchSuggestNfts({\n            walletPublicKey: publicKey,\n            totalValue: solAmount,\n          })\n\n          setSuggestion(suggestion)\n        } catch (error) {\n          console.error(error)\n        } finally {\n          setIsLoading(false)\n        }\n      })()\n    }\n  }, [solAmount])\n\n  return {\n    suggestion: suggestion || null,\n    isLoading,\n  }\n}\n\nconst fetchSuggestNfts = async ({\n  walletPublicKey,\n  totalValue,\n}: {\n  walletPublicKey: web3.PublicKey\n  totalValue: number\n}): Promise<BulkSuggestion | null> => {\n  try {\n    const result = await (\n      await fetch(\n        `https://api.frakt.xyz/nft/suggest2/${walletPublicKey?.toBase58()}?solAmount=${totalValue}`\n      )\n    ).json()\n\n    return result\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAO3C,SAASC,eAAe;AAMxB,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAsB;EAAA,IAAlBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAC7C,IAAAG,gBAAA,GAAsBN,eAAe,EAAE;IAA/BO,SAAS,GAAAD,gBAAA,CAATC,SAAS;EAEjB,IAAAC,SAAA,GAAkCT,QAAQ,CAAU,KAAK,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnDG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAAI,UAAA,GAAoCd,QAAQ,CAAuB,IAAI,CAAC;IAAAe,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjEE,UAAU,GAAAD,UAAA;IAAEE,aAAa,GAAAF,UAAA;EAEhChB,SAAS,CAAC,YAAM;IACd,IAAII,SAAS,EAAE;MACb;MAACe,iBAAA,CAAC,aAAY;QACZ,IAAI;UACFL,YAAY,CAAC,IAAI,CAAC;UAClB,IAAMG,WAAU,SAASG,gBAAgB,CAAC;YACxCC,eAAe,EAAEZ,SAAS;YAC1Ba,UAAU,EAAElB;UACd,CAAC,CAAC;UAEFc,aAAa,CAACD,WAAU,CAAC;QAC3B,CAAC,CAAC,OAAOM,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACtB,CAAC,SAAS;UACRT,YAAY,CAAC,KAAK,CAAC;QACrB;MACF,CAAC,GAAG;IACN;EACF,CAAC,EAAE,CAACV,SAAS,CAAC,CAAC;EAEf,OAAO;IACLa,UAAU,EAAEA,UAAU,IAAI,IAAI;IAC9BJ,SAAS,EAATA;EACF,CAAC;AACH,CAAC;AAED,IAAMO,gBAAgB;EAAA,IAAAK,KAAA,GAAAN,iBAAA,CAAG,WAAAO,KAAA,EAMa;IAAA,IALpCL,eAAe,GAAAK,KAAA,CAAfL,eAAe;MACfC,UAAU,GAAAI,KAAA,CAAVJ,UAAU;IAKV,IAAI;MACF,IAAMK,MAAM,SAAS,OACbC,KAAK,0CAC6BP,eAAe,oBAAfA,eAAe,CAAEQ,QAAQ,EAAE,oBAAcP,UAAU,CAC1F,EACDQ,IAAI,EAAE;MAER,OAAOH,MAAM;IACf,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAO,IAAI;IACb;EACF,CAAC;EAAA,gBAnBKH,gBAAgBA,CAAAW,EAAA;IAAA,OAAAN,KAAA,CAAAO,KAAA,OAAA3B,SAAA;EAAA;AAAA,GAmBrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}