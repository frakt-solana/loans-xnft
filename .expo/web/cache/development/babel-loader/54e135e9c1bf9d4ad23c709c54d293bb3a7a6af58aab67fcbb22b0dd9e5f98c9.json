{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport { BulkTypes } from '@frakt-protocol/frakt-sdk/lib/loans/loansService';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { isEmpty } from 'lodash';\nimport { LOANS_FEE_ADMIN_PUBKEY, LOANS_PROGRAM_PUBKEY } from \"../../constants\";\nimport { getTotalValue, mapSuggestionsBulkNfts } from \"./heplers\";\nimport { useSolanaConnection } from \"../../hooks/xnft-hooks\";\nimport { createProposeLoans } from \"../../utils\";\nimport { Screen } from \"../../components/Screen\";\nimport { badgesInfo } from \"./constants\";\nimport { useBulkSuggestion, useLoansService, useSolanaWallet } from \"../../hooks\";\nimport { styles } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar LoanStatus;\n(function (LoanStatus) {\n  LoanStatus[\"PENDING\"] = \"pending\";\n  LoanStatus[\"SUCCESS\"] = \"success\";\n})(LoanStatus || (LoanStatus = {}));\nvar HARD_CODE_CONNECTION = window.xnft.solana.connection;\nfunction SuggestionsScreen(_ref) {\n  var _suggestion$best, _suggestion$cheapest, _suggestion$safest, _suggestion$max;\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var wallet = useSolanaWallet();\n  var connection = useSolanaConnection();\n  var _useLoansService = useLoansService(),\n    proposeLoans = _useLoansService.proposeLoans;\n  var _useBulkSuggestion = useBulkSuggestion(route.params.solAmount || 0),\n    suggestion = _useBulkSuggestion.suggestion;\n  var bestBulk = (_suggestion$best = suggestion == null ? void 0 : suggestion.best) != null ? _suggestion$best : [];\n  var cheapestBulk = (_suggestion$cheapest = suggestion == null ? void 0 : suggestion.cheapest) != null ? _suggestion$cheapest : [];\n  var safestBulk = (_suggestion$safest = suggestion == null ? void 0 : suggestion.safest) != null ? _suggestion$safest : [];\n  var maxBulk = (_suggestion$max = suggestion == null ? void 0 : suggestion.max) != null ? _suggestion$max : [];\n  var bestBulkValue = getTotalValue(bestBulk);\n  var cheapestBulkValue = getTotalValue(cheapestBulk);\n  var safestBulkValue = getTotalValue(safestBulk);\n  var maxBulkValue = getTotalValue(maxBulk);\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    loanStatus = _useState2[0],\n    setLoanStatus = _useState2[1];\n  var onBorrow = function () {\n    var _ref2 = _asyncToGenerator(function* (type) {\n      try {\n        var bulkNfts = mapSuggestionsBulkNfts(suggestion == null ? void 0 : suggestion[type]);\n        yield createProposeLoans({\n          programPublicKey: LOANS_PROGRAM_PUBKEY,\n          adminPublicKey: LOANS_FEE_ADMIN_PUBKEY,\n          wallet: wallet,\n          bulkNfts: bulkNfts,\n          connection: HARD_CODE_CONNECTION,\n          onAfterSend: function onAfterSend() {\n            return setLoanStatus(LoanStatus.PENDING);\n          }\n        });\n        setLoanStatus(LoanStatus.SUCCESS);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function onBorrow(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getBulkValues = function getBulkValues(bulk, value, type) {\n    if (!bulk.length) return;\n    var _type = badgesInfo[type],\n      color = _type.color,\n      title = _type.title;\n    return _jsxs(View, {\n      style: styles.viewStyles(color),\n      children: [_jsxs(View, {\n        children: [_jsx(View, {\n          style: styles.badge(color),\n          children: title\n        }), _jsx(View, {\n          style: styles.valueInfoStyles,\n          children: _jsxs(Text, {\n            style: styles.valueStyles,\n            children: [\"Borrowing \", value.toFixed(2), \"\\u25CE\"]\n          })\n        }), _jsx(View, {\n          style: styles.nftListStyles,\n          children: (bulk || []).map(function (_ref3) {\n            var imageUrl = _ref3.imageUrl;\n            return _jsx(\"img\", {\n              src: imageUrl,\n              style: styles.imageStyles\n            }, imageUrl);\n          })\n        })]\n      }), _jsx(View, {\n        style: styles.buttonWrapperStyles,\n        children: _jsx(Pressable, {\n          style: styles.borrowButtonStyles(color),\n          onPress: function onPress() {\n            return onBorrow(type);\n          },\n          children: _jsx(Text, {\n            children: \"Borrow\"\n          })\n        })\n      })]\n    });\n  };\n  return _jsx(Screen, {\n    style: styles.screen,\n    children: _jsx(View, {\n      style: styles.container,\n      children: isEmpty(suggestion) ? _jsx(ActivityIndicator, {\n        size: \"large\"\n      }) : _jsxs(_Fragment, {\n        children: [loanStatus === LoanStatus.PENDING && _jsx(View, {\n          style: styles.loansStatusStyles,\n          children: _jsx(Text, {\n            style: styles.text,\n            children: \"We are collateralizing your jpegs. It should take less than a minute\"\n          })\n        }), loanStatus === LoanStatus.SUCCESS && _jsxs(View, {\n          style: styles.loansStatusStyles,\n          children: [_jsx(Text, {\n            style: styles.text,\n            children: \"Congrats! See your NFTs in app.frakt.xyz\"\n          }), _jsx(Pressable, {\n            style: styles.goBackButton,\n            onPress: function onPress() {\n              return navigation.navigate('Home');\n            },\n            children: _jsx(Text, {\n              children: \"Home\"\n            })\n          })]\n        }), loanStatus === null && _jsxs(_Fragment, {\n          children: [getBulkValues(bestBulk, bestBulkValue, BulkTypes.BEST), getBulkValues(cheapestBulk, cheapestBulkValue, BulkTypes.CHEAPEST), getBulkValues(safestBulk, safestBulkValue, BulkTypes.SAFEST), getBulkValues(maxBulk, maxBulkValue, BulkTypes.MAX)]\n        })]\n      })\n    })\n  });\n}\nexport default SuggestionsScreen;","map":{"version":3,"names":["useState","BulkTypes","Text","View","Pressable","ActivityIndicator","isEmpty","LOANS_FEE_ADMIN_PUBKEY","LOANS_PROGRAM_PUBKEY","getTotalValue","mapSuggestionsBulkNfts","useSolanaConnection","createProposeLoans","Screen","badgesInfo","useBulkSuggestion","useLoansService","useSolanaWallet","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","LoanStatus","HARD_CODE_CONNECTION","window","xnft","solana","connection","SuggestionsScreen","_ref","_suggestion$best","_suggestion$cheapest","_suggestion$safest","_suggestion$max","route","navigation","wallet","_useLoansService","proposeLoans","_useBulkSuggestion","params","solAmount","suggestion","bestBulk","best","cheapestBulk","cheapest","safestBulk","safest","maxBulk","max","bestBulkValue","cheapestBulkValue","safestBulkValue","maxBulkValue","_useState","_useState2","_slicedToArray","loanStatus","setLoanStatus","onBorrow","_ref2","_asyncToGenerator","type","bulkNfts","programPublicKey","adminPublicKey","onAfterSend","PENDING","SUCCESS","error","console","_x","apply","arguments","getBulkValues","bulk","value","length","_type","color","title","style","viewStyles","children","badge","valueInfoStyles","valueStyles","toFixed","nftListStyles","map","_ref3","imageUrl","src","imageStyles","buttonWrapperStyles","borrowButtonStyles","onPress","screen","container","size","loansStatusStyles","text","goBackButton","navigate","BEST","CHEAPEST","SAFEST","MAX"],"sources":["/Users/ezekiel/Desktop/frakt/loans-xnft/src/screens/SuggestionsScreen/SuggestionsScreen.tsx"],"sourcesContent":["import { useState } from 'react'\nimport {\n  BorrowNftBulk,\n  BulkTypes,\n} from '@frakt-protocol/frakt-sdk/lib/loans/loansService'\nimport { Text, View, Pressable, ActivityIndicator } from 'react-native'\nimport { isEmpty } from 'lodash'\n\nimport { LOANS_FEE_ADMIN_PUBKEY, LOANS_PROGRAM_PUBKEY } from '../../constants'\nimport { getTotalValue, mapSuggestionsBulkNfts } from './heplers'\nimport { useSolanaConnection } from '../../hooks/xnft-hooks'\nimport { createProposeLoans } from '../../utils'\nimport { Screen } from '../../components/Screen'\nimport { badgesInfo } from './constants'\nimport {\n  useBulkSuggestion,\n  useLoansService,\n  useSolanaWallet,\n} from '../../hooks'\n\nimport { styles } from './styles'\n\nenum LoanStatus {\n  PENDING = 'pending',\n  SUCCESS = 'success',\n}\n\nconst HARD_CODE_CONNECTION = window.xnft.solana.connection\n\ninterface SuggestionsScreenProps {\n  route: any\n  navigation: any\n}\n\nfunction SuggestionsScreen({ route, navigation }: SuggestionsScreenProps) {\n  const wallet = useSolanaWallet()\n  const connection = useSolanaConnection()\n\n  const { proposeLoans } = useLoansService()\n\n  const { suggestion } = useBulkSuggestion(route.params.solAmount || 0)\n\n  const bestBulk = suggestion?.best ?? []\n  const cheapestBulk = suggestion?.cheapest ?? []\n  const safestBulk = suggestion?.safest ?? []\n  const maxBulk = suggestion?.max ?? []\n\n  const bestBulkValue = getTotalValue(bestBulk)\n  const cheapestBulkValue = getTotalValue(cheapestBulk)\n  const safestBulkValue = getTotalValue(safestBulk)\n  const maxBulkValue = getTotalValue(maxBulk)\n\n  const [loanStatus, setLoanStatus] = useState<LoanStatus | null>(null)\n\n  const onBorrow = async (type: string): Promise<void> => {\n    try {\n      const bulkNfts = mapSuggestionsBulkNfts(\n        suggestion?.[type]\n      ) as BorrowNftBulk[]\n\n      await createProposeLoans({\n        programPublicKey: LOANS_PROGRAM_PUBKEY,\n        adminPublicKey: LOANS_FEE_ADMIN_PUBKEY,\n        wallet,\n        bulkNfts,\n        connection: HARD_CODE_CONNECTION,\n        onAfterSend: () => setLoanStatus(LoanStatus.PENDING),\n      })\n\n      setLoanStatus(LoanStatus.SUCCESS)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const getBulkValues = (\n    bulk: BorrowNftBulk[],\n    value: number,\n    type: string\n  ) => {\n    if (!bulk.length) return\n    const { color, title } = (badgesInfo as any)[type]\n\n    return (\n      <View style={styles.viewStyles(color)}>\n        <View>\n          <View style={styles.badge(color)}>{title}</View>\n          <View style={styles.valueInfoStyles}>\n            <Text style={styles.valueStyles}>\n              Borrowing {value.toFixed(2)}◎\n            </Text>\n          </View>\n          <View style={styles.nftListStyles}>\n            {(bulk || []).map(({ imageUrl }) => (\n              <img key={imageUrl} src={imageUrl} style={styles.imageStyles} />\n            ))}\n          </View>\n        </View>\n        <View style={styles.buttonWrapperStyles}>\n          <Pressable\n            style={styles.borrowButtonStyles(color)}\n            onPress={() => onBorrow(type)}\n          >\n            <Text>Borrow</Text>\n          </Pressable>\n        </View>\n      </View>\n    )\n  }\n\n  return (\n    <Screen style={styles.screen}>\n      <View style={styles.container}>\n        {isEmpty(suggestion) ? (\n          <ActivityIndicator size=\"large\" />\n        ) : (\n          <>\n            {loanStatus === LoanStatus.PENDING && (\n              <View style={styles.loansStatusStyles}>\n                <Text style={styles.text}>\n                  We are collateralizing your jpegs. It should take less than a\n                  minute\n                </Text>\n              </View>\n            )}\n            {loanStatus === LoanStatus.SUCCESS && (\n              <View style={styles.loansStatusStyles}>\n                <Text style={styles.text}>\n                  Congrats! See your NFTs in app.frakt.xyz\n                </Text>\n                <Pressable\n                  style={styles.goBackButton}\n                  onPress={() => navigation.navigate('Home')}\n                >\n                  <Text>Home</Text>\n                </Pressable>\n              </View>\n            )}\n            {loanStatus === null && (\n              <>\n                {getBulkValues(bestBulk, bestBulkValue, BulkTypes.BEST)}\n                {getBulkValues(\n                  cheapestBulk,\n                  cheapestBulkValue,\n                  BulkTypes.CHEAPEST\n                )}\n                {getBulkValues(safestBulk, safestBulkValue, BulkTypes.SAFEST)}\n                {getBulkValues(maxBulk, maxBulkValue, BulkTypes.MAX)}\n              </>\n            )}\n          </>\n        )}\n      </View>\n    </Screen>\n  )\n}\n\nexport default SuggestionsScreen\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}